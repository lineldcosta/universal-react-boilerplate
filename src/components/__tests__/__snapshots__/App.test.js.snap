// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="app"
>
    <h1
        className="title"
    >
        Hello, tests
    </h1>
    <ul
        className="navigation"
    >
        <Link
            exact={true}
            to="/"
        >
            Home
        </Link>
        <Link
            to="/counter"
        >
            Counter
        </Link>
        <Link
            to="/async"
        >
            Async
        </Link>
    </ul>
    <Switch>
        <Route
            path="/counter"
            render={[Function]}
        />
        <Route
            path="/async"
            render={[Function]}
        />
    </Switch>
</div>,
  "nodes": Array [
    <div
      className="app"
>
      <h1
            className="title"
      >
            Hello, tests
      </h1>
      <ul
            className="navigation"
      >
            <Link
                  exact={true}
                  to="/"
            >
                  Home
            </Link>
            <Link
                  to="/counter"
            >
                  Counter
            </Link>
            <Link
                  to="/async"
            >
                  Async
            </Link>
      </ul>
      <Switch>
            <Route
                  path="/counter"
                  render={[Function]}
            />
            <Route
                  path="/async"
                  render={[Function]}
            />
      </Switch>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <App
        title="Hello, tests"
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "title": "Hello, tests",
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="app"
>
          <h1
                    className="title"
          >
                    Hello, tests
          </h1>
          <ul
                    className="navigation"
          >
                    <Link
                              exact={true}
                              to="/"
                    >
                              Home
                    </Link>
                    <Link
                              to="/counter"
                    >
                              Counter
                    </Link>
                    <Link
                              to="/async"
                    >
                              Async
                    </Link>
          </ul>
          <Switch>
                    <Route
                              path="/counter"
                              render={[Function]}
                    />
                    <Route
                              path="/async"
                              render={[Function]}
                    />
          </Switch>
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="app"
>
          <h1
                    className="title"
          >
                    Hello, tests
          </h1>
          <ul
                    className="navigation"
          >
                    <Link
                              exact={true}
                              to="/"
                    >
                              Home
                    </Link>
                    <Link
                              to="/counter"
                    >
                              Counter
                    </Link>
                    <Link
                              to="/async"
                    >
                              Async
                    </Link>
          </ul>
          <Switch>
                    <Route
                              path="/counter"
                              render={[Function]}
                    />
                    <Route
                              path="/async"
                              render={[Function]}
                    />
          </Switch>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <App
    title="Hello, tests"
/>,
}
`;
